import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class WordTutor {

    private static final String DATA_FILE = "data.dat";
    private static List<Question> questions = new ArrayList<>();
    private static int currentQuestionIndex = 0;
    private static JFrame studyFrame;
    private static JLabel questionLabel;
    private static JTextField answerField;
    private static JLabel resultLabel;
    private static TrayIcon trayIcon;

    private static class Question {
        String question;
        String answer;

        public Question(String question, String answer) {
            this.question = question;
            this.answer = answer;
        }
    }

    public static void main(String[] args) {
        // AWT 이벤트 스레드에서 GUI 생성 및 실행
        SwingUtilities.invokeLater(() -> {
            if (!SystemTray.isSupported()) {
                System.out.println("SystemTray is not supported");
                return;
            }

            PopupMenu popup = new PopupMenu();
            MenuItem startItem = new MenuItem("학습 시작");
            MenuItem exitItem = new MenuItem("종료");

            // 학습 시작 메뉴 아이템 액션 리스너
            startItem.addActionListener(e -> showStudyWindow());

            // 종료 메뉴 아이템 액션 리스너
            exitItem.addActionListener(e -> {
                SystemTray.getSystemTray().remove(trayIcon);
                System.exit(0);
            });

            popup.add(startItem);
            popup.add(exitItem);

            // 트레이 아이콘 설정
            Image image = Toolkit.getDefaultToolkit().getImage("icon.png"); // icon.png 파일 필요
            trayIcon = new TrayIcon(image, "WordTutor", popup); // 프로젝트 이름 변경
            trayIcon.setImageAutoSize(true);

            try {
                SystemTray.getSystemTray().add(trayIcon);
            } catch (AWTException e) {
                System.out.println("TrayIcon could not be added.");
            }

            loadQuestions(); // 문제 데이터 로드
        });
    }

    private static void loadQuestions() {
        try (Scanner scanner = new Scanner(new File(DATA_FILE), "UTF-8")) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split("@@@");
                    if (parts.length == 2) {
                        questions.add(new Question(parts[0].trim(), parts[1].trim()));
                    } else {
                        System.err.println("잘못된 형식의 줄 발견: " + line);
                    }
                }
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, DATA_FILE + " 파일을 찾을 수 없습니다.", "오류", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    private static void showStudyWindow() {
        if (studyFrame == null || !studyFrame.isShowing()) {
            studyFrame = new JFrame("WordTutor"); // 프로젝트 이름 변경
            studyFrame.setUndecorated(true); // 윈도우 테두리 제거
            studyFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // 창을 닫아도 프로그램 종료 X
            studyFrame.setLayout(new BorderLayout()); // BorderLayout 사용
            studyFrame.setResizable(false); // 수동 크기 조절 비활성화

            questionLabel = new JLabel("", SwingConstants.CENTER); // 가운데 정렬
            questionLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // 여백 추가
            studyFrame.add(questionLabel, BorderLayout.NORTH);

            answerField = new JTextField(20);
            studyFrame.add(answerField, BorderLayout.CENTER);
            answerField.addActionListener(e -> checkAnswerAndNext());

            resultLabel = new JLabel();
            resultLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // 여백 추가
            studyFrame.add(resultLabel, BorderLayout.SOUTH);

            showQuestion();
            studyFrame.pack(); // 프레임 크기를 내용물에 맞게 자동 조절
            studyFrame.setLocationRelativeTo(null); // 화면 중앙에 표시
            studyFrame.setVisible(true);
        } else {
            studyFrame.toFront();
        }
    }

    private static void showQuestion() {
        if (!questions.isEmpty() && currentQuestionIndex < questions.size()) {
            questionLabel.setText(questions.get(currentQuestionIndex).question);
            answerField.setText("");
            resultLabel.setText("");
            adjustFrameSize(); // 프레임 크기 재조정
        } else {
            JOptionPane.showMessageDialog(studyFrame, "모든 문제를 완료했습니다.", "알림", JOptionPane.INFORMATION_MESSAGE);
            currentQuestionIndex = 0;
            showQuestion();
        }
    }

    private static void checkAnswerAndNext() {
        if (!questions.isEmpty() && currentQuestionIndex < questions.size()) {
            String userAnswer = answerField.getText().trim();
            String correctAnswer = questions.get(currentQuestionIndex).answer;

            resultLabel.setText("정답: '" + correctAnswer + "' - 입력: '" + userAnswer + "'"); // 정답 텍스트가 잘리지 않도록 수정
            if (userAnswer.equals(correctAnswer)) {
                resultLabel.setForeground(Color.BLUE);
            } else {
                resultLabel.setForeground(Color.RED);
            }
            adjustFrameSize(); // 프레임 크기 재조정
            currentQuestionIndex++;
            // 약간의 딜레이 후 다음 문제 표시 (사용자가 결과를 볼 수 있도록)
            Timer timer = new Timer(1500, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showQuestion();
                }
            });
            timer.setRepeats(false);
            timer.start();
        }
    }

    private static void adjustFrameSize() {
        if (studyFrame != null) {
            studyFrame.pack(); // 프레임 크기를 내용물에 맞게 자동 조절
        }
    }
}