package wordtutor;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class WordTutor {

    private static String DATA_FILE = "data.dat"; // 기본 데이터 파일 경로
    private static List<Question> allQuestions = new ArrayList<>(); // 모든 문제 저장
    private static List<Question> currentQuestions = new ArrayList<>(); // 현재 학습에 사용될 문제 (랜덤)
    private static int currentQuestionIndex = 0;
    private static JFrame studyFrame;
    private static JLabel questionLabel;
    private static JTextField answerField;
    private static JTextArea resultTextArea;
    private static TrayIcon trayIcon;
    private static boolean answerShown = false;
    private static Point initialClick;
    private static Point frameLocation = null;
    private static final int INITIAL_WIDTH = 350;
    private static final int INITIAL_HEIGHT = 150;
    private static final Random random = new Random();

    private static class Question {
        String question;
        String answer;

        public Question(String question, String answer) {
            this.question = question;
            this.answer = answer;
        }
    }

    public static void main(String[] args) {
        // AWT 이벤트 스레드에서 GUI 생성 및 실행
        SwingUtilities.invokeLater(() -> {
            if (!SystemTray.isSupported()) {
                System.out.println("SystemTray is not supported");
                return;
            }

            PopupMenu popup = new PopupMenu();
            MenuItem startItem = new MenuItem("학습 시작");
            MenuItem exitItem = new MenuItem("종료");
            MenuItem openDataItem = new MenuItem("데이터 파일 열기"); // 새로운 메뉴 아이템
            MenuItem createDataItem = new MenuItem("데이터 파일 생성"); // 새로운 메뉴 아이템

            // 학습 시작 메뉴 아이템 액션 리스너
            startItem.addActionListener(e -> showStudyWindow());

            // 종료 메뉴 아이템 액션 리스너
            exitItem.addActionListener(e -> {
                SystemTray.getSystemTray().remove(trayIcon);
                System.exit(0);
            });

            // 데이터 파일 열기 메뉴 아이템 액션 리스너
            openDataItem.addActionListener(e -> openDataFileDialog());

            // 데이터 파일 생성 메뉴 아이템 액션 리스너
            createDataItem.addActionListener(e -> showCreateDataDialog());

            popup.add(openDataItem); // 메뉴에 추가
            popup.add(createDataItem); // 메뉴에 추가
            popup.add(startItem);
            popup.add(exitItem);

            // 트레이 아이콘 설정
            Image image = Toolkit.getDefaultToolkit().getImage("icon.png"); // icon.png 파일 필요
            trayIcon = new TrayIcon(image, "WordTutor", popup);
            trayIcon.setImageAutoSize(true);

            try {
                SystemTray.getSystemTray().add(trayIcon);
            } catch (AWTException e) {
                System.out.println("TrayIcon could not be added.");
            }

            loadQuestions(DATA_FILE); // 기본 데이터 파일 로드
            showStudyWindow(); // 프로그램 시작 시 바로 학습 시작
        });
    }

    private static void openDataFileDialog() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("데이터 파일 (*.dat)", "dat");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            DATA_FILE = selectedFile.getAbsolutePath();
            loadQuestions(DATA_FILE);
            JOptionPane.showMessageDialog(null, selectedFile.getName() + " 파일을 열었습니다.", "알림", JOptionPane.INFORMATION_MESSAGE);
            currentQuestionIndex = 0;
            if (studyFrame != null && studyFrame.isVisible()) {
                showQuestion();
            }
        }
    }

    private static void loadQuestions(String filePath) {
        allQuestions.clear();
        currentQuestions.clear();
        try (Scanner scanner = new Scanner(new File(filePath), StandardCharsets.UTF_8)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split("@@@");
                    if (parts.length == 2) {
                        allQuestions.add(new Question(parts[0].trim(), parts[1].trim()));
                    } else {
                        System.err.println("잘못된 형식의 줄 발견: " + line);
                    }
                }
            }
            // 학습 시작 시 모든 문제를 섞어서 currentQuestions에 복사
            currentQuestions = new ArrayList<>(allQuestions);
            Collections.shuffle(currentQuestions);
            currentQuestionIndex = 0;
            if (studyFrame != null && studyFrame.isVisible()) {
                showQuestion();
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, filePath + " 파일을 찾을 수 없습니다.", "오류", JOptionPane.ERROR_MESSAGE);
            // 파일이 없으면 allQuestions는 비어있는 상태로 유지
        } catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
    }

    private static void showCreateDataDialog() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV 파일 (*.csv)", "csv");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String delimiter = JOptionPane.showInputDialog(null, "CSV 파일의 구분자를 입력하세요:", "@@@");
            if (delimiter != null && !delimiter.isEmpty()) {
                readCsvAndSaveData(selectedFile, delimiter);
            } else {
                JOptionPane.showMessageDialog(null, "구분자가 입력되지 않았습니다.", "알림", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private static void readCsvAndSaveData(File csvFile, String delimiter) {
        try (Scanner scanner = new Scanner(csvFile, StandardCharsets.UTF_8);
             FileWriter writer = new FileWriter(DATA_FILE, StandardCharsets.UTF_8)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(delimiter);
                    if (parts.length >= 2) {
                        writer.write(parts[0].trim() + "@@@" + parts[1].trim() + "\n");
                    } else {
                        System.err.println("CSV 파일의 형식이 올바르지 않습니다: " + line);
                    }
                }
            }
            JOptionPane.showMessageDialog(null, DATA_FILE + " 파일이 성공적으로 생성되었습니다.", "알림", JOptionPane.INFORMATION_MESSAGE);
            loadQuestions(DATA_FILE); // 데이터 파일이 변경되었으므로 다시 로드
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "데이터 파일 생성 중 오류가 발생했습니다.", "오류", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private static void showStudyWindow() {
        if (studyFrame == null || !studyFrame.isShowing()) {
            studyFrame = new JFrame("WordTutor");
            studyFrame.setUndecorated(true);
            studyFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            studyFrame.setLayout(new BorderLayout());
            studyFrame.setResizable(false);

            // 드래그 기능 구현
            JPanel titleBar = new JPanel(new FlowLayout(FlowLayout.LEFT));
            titleBar.addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    initialClick = e.getPoint();
                    studyFrame.getComponentAt(initialClick);
                }
            });
            titleBar.addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    int thisX = studyFrame.getLocation().x;
                    int thisY = studyFrame.getLocation().y;
                    int xMoved = e.getX() - initialClick.x;
                    int yMoved = e.getY() - initialClick.y;
                    studyFrame.setLocation(thisX + xMoved, thisY + yMoved);
                    frameLocation = studyFrame.getLocation();
                }
            });
            studyFrame.add(titleBar, BorderLayout.NORTH);

            questionLabel = new JLabel("", SwingConstants.CENTER);
            questionLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            studyFrame.add(questionLabel, BorderLayout.CENTER);

            JPanel inputPanel = new JPanel(new BorderLayout());
            answerField = new JTextField(30);
            answerField.setHorizontalAlignment(JTextField.CENTER);
            inputPanel.add(answerField, BorderLayout.NORTH);

            resultTextArea = new JTextArea(5, 30);
            resultTextArea.setLineWrap(true);
            resultTextArea.setWrapStyleWord(true);
            resultTextArea.setEditable(false);
            JScrollPane resultScrollPane = new JScrollPane(resultTextArea);
            inputPanel.add(resultScrollPane, BorderLayout.SOUTH);

            studyFrame.add(inputPanel, BorderLayout.SOUTH);

            answerField.addActionListener(e -> {
                if (answerShown) {
                    showQuestion(); // 정답을 본 후 다음 문제 표시 (랜덤)
                } else {
                    checkAnswer();
                }
            });

            showQuestion(); // 첫 번째 문제 표시
            studyFrame.setSize(INITIAL_WIDTH, studyFrame.getPreferredSize().height);
            if (frameLocation != null) {
                studyFrame.setLocation(frameLocation);
            } else {
                studyFrame.setLocationRelativeTo(null);
            }
            studyFrame.setVisible(true);
        } else {
            studyFrame.toFront();
        }
    }

    private static void showQuestion() {
        answerShown = false;
        resultTextArea.setText("");
        if (!currentQuestions.isEmpty()) {
            if (currentQuestionIndex >= currentQuestions.size()) {
                Collections.shuffle(currentQuestions); // 모든 문제를 다 봤으면 다시 섞음
                currentQuestionIndex = 0;
            }
            questionLabel.setText(currentQuestions.get(currentQuestionIndex).question);
            answerField.setText("");
            adjustFrameSize();
            answerField.requestFocusInWindow();
        } else {
            questionLabel.setText("데이터 파일에 문제가 없습니다.");
            answerField.setEnabled(false);
        }
    }

    private static void checkAnswer() {
        if (!answerShown && !currentQuestions.isEmpty()) {
            String userAnswer = answerField.getText().trim();
            String correctAnswer = currentQuestions.get(currentQuestionIndex).answer;

            resultTextArea.setText("정답: '" + correctAnswer + "'\n입력: '" + userAnswer + "'");
            if (userAnswer.equals(correctAnswer)) {
                resultTextArea.setForeground(Color.BLUE);
            } else {
                resultTextArea.setForeground(Color.RED);
            }
            adjustFrameSize();
            answerShown = true;
            currentQuestionIndex++; // 정답 확인 후 다음 문제 인덱스 증가
        }
    }

    private static void adjustFrameSize() {
        if (studyFrame != null) {
            int preferredHeight = studyFrame.getPreferredSize().height;
            studyFrame.setSize(INITIAL_WIDTH, preferredHeight);
            studyFrame.setLocation(studyFrame.getLocation());
        }
    }
}